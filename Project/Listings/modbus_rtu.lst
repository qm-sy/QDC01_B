C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS_RTU
OBJECT MODULE PLACED IN ..\Output\modbus_rtu.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE ..\Emembed\Src\modbus_rtu.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\BSP\Inc;..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus_rtu.lst) OBJECT(
                    -..\Output\modbus_rtu.obj)

line level    source

   1          #include "modbus_rtu.h"
   2          
   3          MODBIS_INFO modbus;
   4          
   5          /**
   6           * @brief       modbus_rtu  无奇偶校验
   7           *
   8           * @param   void
   9           *
  10           * @return  void 
  11          **/
  12          void Modbus_Event( void )
  13          {
  14   1          uint16_t crc,rccrc;
  15   1          
  16   1          /*1.接收完毕                                           */
  17   1          if( rs485.RX4_rev_end_Flag == 1 )
  18   1          {
  19   2              /*2.清空接收完毕标志位                              */    
  20   2              rs485.RX4_rev_end_Flag = 0;
  21   2      
  22   2              /*3.CRC校验                                         */
  23   2              crc = MODBUS_CRC16(rs485.RX4_buf, rs485.RX4_rev_cnt-2);
  24   2              rccrc = (rs485.RX4_buf[rs485.RX4_rev_cnt-1]) | (rs485.RX4_buf[rs485.RX4_rev_cnt-2]<<8);
  25   2      
  26   2              /*4.清空接收计数                                    */
  27   2              rs485.RX4_rev_cnt = 0; 
  28   2      
  29   2              /*5.CRC校验通过，进行地址域校验                      */
  30   2              if( crc == rccrc )
  31   2              {
  32   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  33   3                  if( rs485.RX4_buf[0] == MY_ADDR )
  34   3                  {
  35   4                      switch ( rs485.RX4_buf[1] )
  36   4                      {
  37   5                          case 0x03:
  38   5                              Modbus_Fun3();
  39   5                              break;
  40   5      
  41   5                          case 0x04:
  42   5                              Modbus_Fun4();
  43   5                              break;
  44   5      
  45   5                          case 0x06:
  46   5                              Modbus_Fun6();
  47   5                              break;  
  48   5      
  49   5                          case 0x10:  
  50   5                              Modbus_Fun16();
  51   5      
  52   5                          default:
  53   5                              break;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 2   

  54   5                      }
  55   4                  }
  56   3              }
  57   2          }
  58   1      }
  59          
  60          /**
  61           * @brief       读输出寄存器  03
  62           *
  63           * @param   void
  64           *
  65           * @return  void 
  66          **/
  67          void Modbus_Fun3( void )
  68          {
  69   1          uint16_t i;
  70   1      
  71   1          modbus.send_value_addr  = 3;                 //DATA1 H 位置
  72   1          modbus.byte_cnt   = (rs485.RX4_buf[4]<<8 | rs485.RX4_buf[5]) *2;
  73   1          modbus.start_addr = rs485.RX4_buf[2]<<8 | rs485.RX4_buf[3];
  74   1      
  75   1          rs485.TX4_buf[0]  = MY_ADDR;                //Addr
  76   1          rs485.TX4_buf[1]  = 0x03;                   //Fun
  77   1          rs485.TX4_buf[2]  = modbus.byte_cnt;        //Byte Count
  78   1      
  79   1          for( i = modbus.start_addr; i < modbus.start_addr + modbus.byte_cnt/2; i++ )
  80   1          {
  81   2              /*    每次循环前初始化byte_info                       */
  82   2              modbus.byte_info_H = modbus.byte_info_L = 0X00;
  83   2              switch (i)
  84   2              {
  85   3                  /*  30001  NTC1、NTC2温度查询                           */
  86   3                  case 0:
  87   3                      modbus.byte_info_L = get_temp(NTC_1);
  88   3                      modbus.byte_info_H = get_temp(NTC_2);   
  89   3      
  90   3                      break;
  91   3      
  92   3                  /*  30002  NTC3、NTC4温度查询                */
  93   3                  case 1:
  94   3                      modbus.byte_info_H = get_temp(NTC_4);    
  95   3                      modbus.byte_info_L = get_temp(NTC_3);
  96   3      
  97   3                      break;
  98   3      
  99   3                  /*  30003 环境温湿度查询                   */
 100   3                  case 2:
 101   3                      modbus.byte_info_H = 0x41;           
 102   3                      modbus.byte_info_L = 0x19;          
 103   3      
 104   3                      break;
 105   3      
 106   3                  /*  30004 Signal_IN状态查询                   */
 107   3                  case 3:
 108   3                      modbus.byte_info_H = 0x00;           
 109   3                      modbus.byte_info_L = ac_dc.signal_in_flag;          
 110   3      
 111   3                      break;
 112   3                  default:
 113   3                      break;
 114   3              }
 115   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_H;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 3   

 116   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_L;
 117   2          }
 118   1          slave_to_master(0x03,3 + modbus.byte_cnt);
 119   1      }
 120          
 121          
 122          /**
 123           * @brief       读输入寄存器  04
 124           *
 125           * @param   void
 126           *
 127           * @return  void 
 128          **/
 129          void Modbus_Fun4( void )
 130          {
 131   1          uint16_t i;
 132   1      
 133   1          modbus.send_value_addr  = 3;                //DATA1 H 位置
 134   1          modbus.byte_cnt   = (rs485.RX4_buf[4]<<8 | rs485.RX4_buf[5]) *2;
 135   1          modbus.start_addr = rs485.RX4_buf[2]<<8 | rs485.RX4_buf[3];
 136   1      
 137   1          rs485.TX4_buf[0]  = MY_ADDR;                //Addr
 138   1          rs485.TX4_buf[1]  = 0x04;                   //Fun
 139   1          rs485.TX4_buf[2]  = modbus.byte_cnt;        //Byte Count
 140   1      
 141   1          for( i = modbus.start_addr; i < modbus.start_addr + modbus.byte_cnt/2; i++ )
 142   1          {
 143   2              /*    每次循环前初始化byte_info                       */
 144   2              modbus.byte_info_H = modbus.byte_info_L = 0X00;
 145   2              switch (i)
 146   2              {   
 147   3                  /*  40001 风速查询                     */
 148   3                  case 0:
 149   3                      modbus.byte_info_L = PWMB_CCR7 / 184;
 150   3                      modbus.byte_info_H = 0x00;
 151   3      
 152   3                      break;
 153   3      
 154   3                  /*  40002 LED开关状态查询                     */    
 155   3                  case 1:
 156   3                      modbus.byte_info_L = ~LED;
 157   3                      modbus.byte_info_H = 0X00;
 158   3                      break;
 159   3      
 160   3                  /*  40003 3路220V开关使能查询                         */
 161   3                  case 2:    
 162   3                      modbus.byte_info_L = (ac_dc.ac220_out1_enable) | (ac_dc.ac220_out2_enable << 1) | (ac_dc.a
             -c220_out3_enable << 2);
 163   3                      modbus.byte_info_H = (ac_dc.time_delay - 58000)/75;
 164   3      
 165   3                      break;
 166   3      
 167   3                  /*  40004 同步状态查询              */
 168   3                  case 3:    
 169   3                      modbus.byte_info_L = ac_dc.sync_flag;
 170   3                      modbus.byte_info_H = 0X00;  
 171   3      
 172   3                      break;
 173   3      
 174   3                  /*  40005 工作模式查询                     */
 175   3                  case 4:   
 176   3                      modbus.byte_info_L = ac_dc.mode_info;
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 4   

 177   3                      modbus.byte_info_H = 0X00;                    
 178   3      
 179   3                      break;
 180   3      
 181   3                  /*  40006 报警温度查询                     */
 182   3                  case 5:   
 183   3                      modbus.byte_info_L = temp.temp_alarm_value;
 184   3                      modbus.byte_info_H = 0X00;                    
 185   3      
 186   3                      break;
 187   3                  default:
 188   3                      break;
 189   3              }
 190   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_H;
 191   2              rs485.TX4_buf[modbus.send_value_addr++] = modbus.byte_info_L;
 192   2          }
 193   1          slave_to_master(0x04,3 + modbus.byte_cnt);
 194   1      }
 195          
 196          /**
 197           * @brief       写单个输出寄存器  06
 198           *
 199           * @param   void
 200           *
 201           * @return  void 
 202          **/
 203          void Modbus_Fun6( void )
 204          {
 205   1          switch (rs485.RX4_buf[3])
 206   1          {
 207   2              /*  40001  风速设置                 */
 208   2              case 0x00:                  
 209   2                  fan_ctrl(rs485.RX4_buf[5]);
 210   2      
 211   2                  eeprom.pwm_info = rs485.RX4_buf[5];
 212   2      
 213   2                  break;
 214   2      
 215   2              /*  40002  LED 开关状态设置                          */
 216   2              case 0x01:                                         
 217   2      
 218   2                  led_ctrl(rs485.RX4_buf[5]);
 219   2      
 220   2                  eeprom.led_info = rs485.RX4_buf[5];
 221   2      
 222   2                  break;
 223   2      
 224   2              /*  40003 三路220V输出使能设置                          */
 225   2              case 0x02:                                         
 226   2                  ac_dc.ac220_out1_enable = (rs485.RX4_buf[5]    & 0x01);
 227   2                  ac_dc.ac220_out2_enable = (rs485.RX4_buf[5]>>1 & 0x01);
 228   2                  ac_dc.ac220_out3_enable = (rs485.RX4_buf[5]>>2 & 0x01);
 229   2                  ac_220v_crl(rs485.RX4_buf[4]);
 230   2                  
 231   2                  eeprom.ac220_switch = rs485.RX4_buf[5];
 232   2                  eeprom.ac220_level  = rs485.RX4_buf[4];
 233   2                  break;  
 234   2                  
 235   2              /*  40004  同步状态设置                   */
 236   2              case 0x03:                                         
 237   2                  ac_dc.sync_flag = rs485.RX4_buf[5];
 238   2                  sync_ctrl();
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 5   

 239   2      
 240   2                  eeprom.sync_info = rs485.RX4_buf[5];
 241   2      
 242   2                  break;
 243   2      
 244   2              /*  40005  工作模式设置                   */
 245   2              case 0x04:                                         
 246   2                  ac_dc.mode_info = rs485.RX4_buf[5];
 247   2                  mode_ctrl(ac_dc.mode_info);
 248   2      
 249   2                  eeprom.mode_info = rs485.RX4_buf[5];
 250   2      
 251   2                  break;
 252   2      
 253   2              /*  40006  报警温度设置                   */
 254   2              case 0x05:                                         
 255   2                  temp.temp_alarm_value = rs485.RX4_buf[5];
 256   2      
 257   2                  eeprom.temp_alarm_value = rs485.RX4_buf[5];
 258   2                  
 259   2                  break;
 260   2      
 261   2              default:
 262   2                  break;   
 263   2          }
 264   1      
 265   1          slave_to_master(0x06,8);
 266   1      
 267   1          eeprom_data_record();
 268   1      }
 269          
 270          /**
 271           * @brief       写多个输出寄存器  16
 272           *
 273           * @param   void
 274           *
 275           * @return  void 
 276          **/
 277          void Modbus_Fun16( void )
 278          {
 279   1          uint16_t i;
 280   1      
 281   1          modbus.rcv_value_addr = 7;                  //DATA1 H位置
 282   1          modbus.byte_cnt   = rs485.RX4_buf[6];
 283   1          modbus.start_addr = rs485.RX4_buf[2]<<8 | rs485.RX4_buf[3];
 284   1      
 285   1          
 286   1          for( i = modbus.start_addr; i < modbus.start_addr + modbus.byte_cnt/2; i++)
 287   1          {
 288   2              modbus.byte_info_H = rs485.RX4_buf[modbus.rcv_value_addr];
 289   2              modbus.byte_info_L = rs485.RX4_buf[modbus.rcv_value_addr + 1];
 290   2              switch (i)
 291   2              {
 292   3                  /*  40001  风速设置                 */
 293   3                  case 0x00:
 294   3                      fan_ctrl(modbus.byte_info_L);
 295   3      
 296   3                      eeprom.pwm_info = modbus.byte_info_L;
 297   3      
 298   3                      break;
 299   3                  
 300   3                  /*  40002  LED 开关状态设置                          */
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 6   

 301   3                  case 0x01:
 302   3                      led_ctrl(modbus.byte_info_L);
 303   3      
 304   3                      eeprom.led_info = modbus.byte_info_L;
 305   3      
 306   3                      break;
 307   3      
 308   3                  /*  40003 三路220V输出使能设置                          */
 309   3                  case 0x02:
 310   3                      ac_dc.ac220_out1_enable = (modbus.byte_info_L    & 0x01);
 311   3                      ac_dc.ac220_out2_enable = (modbus.byte_info_L>>1 & 0x01);
 312   3                      ac_dc.ac220_out3_enable = (modbus.byte_info_L>>2 & 0x01);
 313   3                      ac_220v_crl(modbus.byte_info_H);
 314   3      
 315   3                      eeprom.ac220_switch = modbus.byte_info_L;
 316   3                      eeprom.ac220_level  = modbus.byte_info_H;
 317   3      
 318   3                      break;
 319   3      
 320   3                  
 321   3                  /*  40004  同步状态设置                   */
 322   3                  case 0x03:
 323   3                      ac_dc.sync_flag = modbus.byte_info_L;
 324   3                      sync_ctrl();
 325   3      
 326   3                      eeprom.sync_info = modbus.byte_info_L;
 327   3      
 328   3                      break;
 329   3      
 330   3                  /*  40005  工作模式设置                   */
 331   3                  case 0x04:                                         
 332   3                      ac_dc.mode_info = modbus.byte_info_L;
 333   3                      mode_ctrl(ac_dc.mode_info);
 334   3      
 335   3                      eeprom.mode_info = modbus.byte_info_L;
 336   3      
 337   3                      break;
 338   3      
 339   3                  /*  40006  报警温度设置                   */
 340   3                  case 0x05:                                         
 341   3                      temp.temp_alarm_value = modbus.byte_info_L;
 342   3      
 343   3                      eeprom.temp_alarm_value = modbus.byte_info_L;
 344   3                      
 345   3                      break;
 346   3                      
 347   3                  default:
 348   3                      break;
 349   3              }
 350   2              modbus.rcv_value_addr += 2;         //从Value1_H →→ 从Value2_H
 351   2          }
 352   1      
 353   1          slave_to_master(0x10,8);
 354   1      
 355   1          eeprom_data_record();                      //记录更改后的值
 356   1      }
 357          
 358          
 359          /**
 360           * @brief       从机回复主机
 361           *  
 362           * @param   code_num:功能码       
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 7   

 363           * @param   length:数据长度        
 364           * 
 365            @return  crc16:crc校验的值 2byte
 366           */
 367          void slave_to_master(uint8_t code_num,uint8_t length)
 368          {
 369   1          uint16_t crc;
 370   1      
 371   1          switch (code_num)
 372   1          {
 373   2              case 0x03:
 374   2                  crc = MODBUS_CRC16(rs485.TX4_buf,length);
 375   2      
 376   2                  rs485.TX4_buf[length] = crc;                 //CRC H
 377   2                  rs485.TX4_buf[length+1] = crc>>8;            //CRC L
 378   2      
 379   2                  rs485.TX4_send_bytelength = length + 2;
 380   2                  
 381   2                  break;
 382   2              case 0x04:
 383   2                  crc = MODBUS_CRC16(rs485.TX4_buf,length);
 384   2      
 385   2                  rs485.TX4_buf[length] = crc;                 //CRC H
 386   2                  rs485.TX4_buf[length+1] = crc>>8;            //CRC L
 387   2      
 388   2                  rs485.TX4_send_bytelength = length + 2;
 389   2                  
 390   2                  break;    
 391   2      
 392   2              case 0x06:
 393   2                  memcpy(rs485.TX4_buf,rs485.RX4_buf,8);
 394   2      
 395   2                  rs485.TX4_send_bytelength = length;
 396   2                  
 397   2                  break;   
 398   2      
 399   2              case 0x10:
 400   2                  memcpy(rs485.TX4_buf,rs485.RX4_buf,6);
 401   2              
 402   2                  crc = MODBUS_CRC16(rs485.TX4_buf,6);
 403   2      
 404   2                  rs485.TX4_buf[7] = crc;                 //CRC H
 405   2                  rs485.TX4_buf[6] = crc>>8;              //CRC L
 406   2              
 407   2                  rs485.TX4_send_bytelength = length;
 408   2                  
 409   2                  break;         
 410   2      
 411   2              default:
 412   2                  break;
 413   2          }
 414   1      
 415   1          DR_485 = 1;                                 //485可以发送
 416   1          delay_ms(2);
 417   1          S4CON |= S4TI;                              //开始发送
 418   1          delay_ms(1);
 419   1      }
 420          
 421          
 422          /**
 423           * @brief       crc校验函数
 424           * 
C51 COMPILER V9.60.7.0   MODBUS_RTU                                                        04/14/2025 16:59:40 PAGE 8   

 425           * @param   buf：  Address(1 byte) +Funtion(1 byte) ）+Data(n byte)   
 426           * @param   length:数据长度           
 427           * 
 428            @return  crc16:crc校验的值 2byte
 429           */
 430          uint16_t MODBUS_CRC16(uint8_t *buf, uint8_t length)
 431          {
 432   1              uint8_t i;
 433   1              uint16_t        crc16;
 434   1      
 435   1          /* 1, 预置16位CRC寄存器为0xffff（即全为1）                          */
 436   1              crc16 = 0xffff; 
 437   1      
 438   1              do
 439   1              {
 440   2              /* 2, 把8位数据与16位CRC寄存器的低位相异或，把结果放于CRC寄存器     */    
             -    
 441   2                      crc16 ^= (uint16_t)*buf;                //
 442   2                      for(i=0; i<8; i++)              
 443   2                      {
 444   3                  /* 3, 如果最低位为1，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位 再异或0xA001    */
 445   3                              if(crc16 & 1)
 446   3                  {
 447   4                      crc16 = (crc16 >> 1) ^ 0xA001;
 448   4                  }
 449   3                  /* 4, 如果最低位为0，把CRC寄存器的内容右移一位(朝低位)，用0填补最高
             -位                */
 450   3                  else
 451   3                  {
 452   4                      crc16 >>= 1;
 453   4                  }           
 454   3                      }
 455   2                      buf++;
 456   2              }while(--length != 0);
 457   1      
 458   1              return  (crc16);
 459   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1552    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
