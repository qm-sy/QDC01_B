C51 COMPILER V9.60.7.0   DHT11                                                             04/14/2025 16:59:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE DHT11
OBJECT MODULE PLACED IN ..\Output\dht11.obj
COMPILER INVOKED BY: D:\APP\Keil_v5\C51\BIN\C51.EXE ..\BSP\Src\dht11.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BSP\Inc;
                    -..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\dht11.lst) OBJECT(..\Output\dht1
                    -1.obj)

line level    source

   1          // #include  "dht11.h" 
   2          
   3          // DHT11 dht11;
   4          // DHT11_VALUE dht11_value;
   5          
   6          // /**************************************************************************************
   7          //  * Êèè  Ëø∞ : Âª∂Êó∂ÂáΩÊï∞
   8          //  * ÂÖ•  ÂèÇ : 10usÁöÑÊï¥Êï∞ÂÄç
   9          //  * ËøîÂõûÂÄº : Êó†
  10          //  **************************************************************************************/
  11          // void delay_10us(uint8_t x)
  12          // {
  13          //   uint8_t i;
  14          
  15          //   for (i = 0; i < x; i++) 
  16          //      {
  17          //         delay_us(10);
  18          //     }               
  19          // }
  20          
  21          //  /**************************************************************************************
  22          //  * Êèè  Ëø∞ : ‰ªéDHT11ËØªÂèñ‰∏Ä‰∏™Â≠óËäÇÔºåMSBÂÖàË°å
  23          //  * ÂÖ•  ÂèÇ : Êó†
  24          //  * ËøîÂõûÂÄº : uint8_t
  25          //  **************************************************************************************/
  26          // static uint8_t Read_Byte(void)  
  27          // {       
  28          //      uint8_t i, temp=0;
  29          
  30          //      for(i=0;i<8;i++)    
  31          //      {          
  32          //              while(!A1_DHT11);  //ÊØèbit‰ª•50us‰ΩéÁîµÂπ≥Ê†áÁΩÆÂºÄÂßãÔºåËΩÆËØ¢Áõ¥Âà∞‰ªéÊú∫ÂèëÂá∫ ÁöÑ50us ‰ΩéÁîµÂπ≥ 
             -ÁªìÊùü
  33          
  34          //              /*DHT11 ‰ª•23~27usÁöÑÈ´òÁîµÂπ≥Ë°®Á§∫‚Äú0‚ÄùÔºå‰ª•68~74usÁöÑÈ´òÁîµÂπ≥Ë°®Á§∫‚Äú1‚Äù  */
  35          //              delay_10us(4); //Âª∂Êó∂Á∫¶40us,Ëøô‰∏™Âª∂Êó∂ÈúÄË¶ÅÂ§ß‰∫éÊï∞ÊçÆ0ÊåÅÁª≠ÁöÑÊó∂Èó¥Âç≥ÂèØ               
  36          
  37          //              if(A1_DHT11)   //Á∫¶40usÂêé‰ªç‰∏∫È´òÁîµÂπ≥Ë°®Á§∫Êï∞ÊçÆ‚Äú1‚Äù
  38          //              {
  39          //                      while(A1_DHT11);  //Á≠âÂæÖÊï∞ÊçÆ1ÁöÑÈ´òÁîµÂπ≥ÁªìÊùü
  40          //                      temp|=(uint8_t)(0x01<<(7-i));  //ÊääÁ¨¨7-i‰ΩçÁΩÆ1ÔºåMSBÂÖàË°å 
  41          //              }
  42          //              else     //40usÂêé‰∏∫‰ΩéÁîµÂπ≥Ë°®Á§∫Êï∞ÊçÆ‚Äú0‚Äù
  43          //              {                          
  44          //                      temp&=(uint8_t)~(0x01<<(7-i)); //ÊääÁ¨¨7-i‰ΩçÁΩÆ0ÔºåMSBÂÖàË°å
  45          //              }
  46          //      }
  47          //      return temp;    
  48          // }
  49          
  50          //  /**************************************************************************************
  51          //  * Êèè  Ëø∞ : ‰∏ÄÊ¨°ÂÆåÊï¥ÁöÑÊï∞ÊçÆ‰º†Ëæì‰∏∫40bitÔºåÈ´ò‰ΩçÂÖàÂá∫
  52          //  * ÂÖ•  ÂèÇ : 8bit ÊπøÂ∫¶Êï¥Êï∞ + 8bit ÊπøÂ∫¶Â∞èÊï∞ + 8bit Ê∏©Â∫¶Êï¥Êï∞ + 8bit Ê∏©Â∫¶Â∞èÊï∞ + 8bit Ê†°È
C51 COMPILER V9.60.7.0   DHT11                                                             04/14/2025 16:59:40 PAGE 2   

             -™åÂíå 
  53          //  * ËøîÂõûÂÄº : Êó†
  54          //  **************************************************************************************/
  55          // void Read_DHT11(void)   //Ê∏©Êπø‰º†ÊÑüÂêØÂä®
  56          // {
  57          //     uint8_t u8T_data_H,u8T_data_L,u8RH_data_H,u8RH_data_L,u8checkdata,uchartemp;
  58          
  59          //     A1_DHT11=0;         //‰∏ªÊú∫Êãâ‰Ωé
  60          //     delay_ms(20);       //Âª∂Êó∂20msÔºåÈúÄÂ§ß‰∫é18ms
  61          //     A1_DHT11=1;         //ÊÄªÁ∫øÊãâÈ´ò ‰∏ªÊú∫Âª∂Êó∂30us
  62          //     delay_10us(3);      //Âª∂Êó∂Á∫¶30us
  63                  
  64          //     if(!A1_DHT11)       //Âà§Êñ≠‰ªéÊú∫ÊòØÂê¶Êúâ‰ΩéÁîµÂπ≥ÂìçÂ∫î‰ø°Âè∑ Â¶Ç‰∏çÂìçÂ∫îÂàôË∑≥Âá∫ÔºåÂìçÂ∫îÂàôÂ
             -êë‰∏ãËøêË°å   
  65          //     {
  66          //                        while(!A1_DHT11);   //ËΩÆËØ¢Áõ¥Âà∞‰ªéÊú∫ÂèëÂá∫ÁöÑ83us ‰ΩéÁîµÂπ≥ ÂìçÂ∫î‰ø°Âè∑ÁªìÊùü
  67          //                        while(A1_DHT11);    //ËΩÆËØ¢Áõ¥Âà∞‰ªéÊú∫ÂèëÂá∫ÁöÑ87us È´òÁîµÂπ≥ Ê†áÁΩÆ‰ø°Âè∑ÁªìÊùü
  68                                  
  69          //                        /*ÂºÄÂßãÊé•Êî∂Êï∞ÊçÆ*/ 
  70          //         dht11.u8RH_data_H_temp= Read_Byte();
  71          //         dht11.uRH_data_L_temp= Read_Byte();
  72          //         dht11.u8T_data_H_temp= Read_Byte();
  73          //         dht11.u8T_data_L_temp= Read_Byte();
  74          //         dht11.u8checkdata_temp= Read_Byte();
  75                                  
  76          //         A1_DHT11=1;                   //ËØªÂèñÁªìÊùüÔºå‰∏ªÊú∫ÊãâÈ´ò
  77                                  
  78          //                        /*Ê£ÄÊü•ËØªÂèñÁöÑÊï∞ÊçÆÊòØÂê¶Ê≠£Á°Æ*/
  79          //         uchartemp=(dht11.u8T_data_H_temp+dht11.u8T_data_L_temp+dht11.u8RH_data_H_temp+dht11.uRH_data_L_
             -temp);
  80          //         if(uchartemp==dht11.u8checkdata_temp)   //Ê†°È™å
  81          //         {
  82          //             u8RH_data_H=dht11.u8RH_data_H_temp;
  83          //             u8RH_data_L=dht11.uRH_data_L_temp;
  84          //             u8T_data_H=dht11.u8T_data_H_temp;
  85          //             u8T_data_L=dht11.u8T_data_L_temp;
  86          //             u8checkdata=dht11.u8checkdata_temp;
  87          //         }                            
  88          //         dht11_value.tempH = u8T_data_H/10; 
  89          //         dht11_value.tempL = u8T_data_H%10;
  90                  
  91          //         dht11_value.humyH = u8RH_data_H/10; 
  92          //         dht11_value.humyL = u8RH_data_H%10;                                  
  93          //     } 
  94          //     else      //Ê≤°ËÉΩÊàêÂäüËØªÂèñÔºåËøîÂõû0
  95          //     {
  96          //         dht11_value.tempH = 0; 
  97          //         dht11_value.tempL = 0;        
  98          //         dht11_value.humyH = 0; 
  99          //         dht11_value.humyL = 0;       
 100          //     }  
 101          // }
 102          
 103          // /**************************************************************************************
 104          //  * Êèè  Ëø∞ : ‰∏≤Âè£ÂÆûÊó∂ÊòæÁ§∫Ê∏©ÊπøÂ∫¶
 105          //  * ÂÖ•  ÂèÇ : Êó†
 106          //  * ËøîÂõûÂÄº : Êó†
 107          //  **************************************************************************************/
 108          // void DHT11_TEST(void)
 109          // {
 110          //     static uint8_t temp[3]; 
 111          //     static uint8_t humidity[3];   
C51 COMPILER V9.60.7.0   DHT11                                                             04/14/2025 16:59:40 PAGE 3   

 112          //     uint16_t tmep_value;
 113          //     uint16_t humidity_value;
 114          
 115          //     memset(temp, 0, 3);                             //Â∞ÜtempÊï∞ÁªÑÂàùÂßãÂåñÔºàÊ∏ÖÈõ∂Ôºâ
 116          //     memset(humidity, 0, 3);                         //Â∞ÜhumidityÊï∞ÁªÑÂàùÂßãÂåñÔºàÊ∏ÖÈõ∂Ôºâ
 117                          
 118          //        Read_DHT11();                                   //Ëé∑ÂèñÊ∏©ÊπøÂ∫¶ÂÄº
 119                          
 120          //        //Â∞ÜÊ∏©ÊπøÂ∫¶ÂÄºËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤
 121          //     temp[0] = dht11_value.tempH + 0x30;
 122          //     temp[1] = dht11_value.tempL + 0x30;
 123          //     tmep_value = temp[0]<<8 | temp[1];
 124          //     humidity[0] = dht11_value.humyH + 0x30;
 125          //     humidity[1] = dht11_value.humyL + 0x30;
 126          //     humidity_value = humidity[0]<<8 | humidity[1];
 127                          
 128          //              //‰∏≤Âè£ÊâìÂç∞Ê∏©ÊπøÂ∫¶ÂÄº
 129          //     printf("Temperature: 0x%04x ,Humidity is 0x%04x \r\n",tmep_value,humidity_value);
 130          // }
 131          
 132          
 133          // /*********************************END FILE*************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
